"""introduce companies; refactor clients to reference company

Revision ID: 66b42469cfac
Revises: 2e904f969305
Create Date: 2025-09-05 10:46:05.188757

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import uuid
from datetime import datetime, timezone


# revision identifiers, used by Alembic.
revision: str = '66b42469cfac'
down_revision: Union[str, None] = '2e904f969305'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('companies',
    sa.Column('id', sa.String(length=36), nullable=False),
    sa.Column('nit', sa.String(length=9), nullable=False),
    sa.Column('business_name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.String(length=500), nullable=True),
    sa.Column('address', sa.String(length=200), nullable=True),
    sa.Column('phone', sa.String(length=50), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('status', sa.Enum('ACTIVE', 'INACTIVE', name='company_status'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_companies_nit'), 'companies', ['nit'], unique=True)
    # 1) Add company_id as nullable to allow backfill
    op.add_column('clients', sa.Column('company_id', sa.String(length=36), nullable=True))
    # 2) Backfill: create companies from distinct (nit, business_name)
    conn = op.get_bind()
    rows = conn.execute(sa.text(
        "SELECT DISTINCT nit, business_name FROM clients"
    )).fetchall()
    now = datetime.now(timezone.utc)
    for nit, business_name in rows:
        if nit is None and business_name is None:
            continue
        # Normalize to strings
        nit_val = nit or ''
        name_val = business_name or ''
        # Ensure a company exists for this nit/name
        existing = conn.execute(
            sa.text("SELECT id FROM companies WHERE nit = :nit"), {"nit": nit_val}
        ).fetchone()
        if existing is None:
            comp_id = str(uuid.uuid4())
            conn.execute(sa.text(
                """
                INSERT INTO companies (id, nit, business_name, status, created_at, updated_at)
                VALUES (:id, :nit, :name, 'ACTIVE', :created, :updated)
                """
            ), {"id": comp_id, "nit": nit_val, "name": name_val, "created": now, "updated": now})
    # 3) Set company_id for clients by matching nit
    conn.execute(sa.text(
        """
        UPDATE clients c
        SET company_id = comp.id
        FROM companies comp
        WHERE comp.nit = c.nit
        """
    ))
    # 4) Set NOT NULL and constraints
    op.alter_column('clients', 'company_id', existing_type=sa.String(length=36), nullable=False)
    op.drop_index('ix_clients_nit', table_name='clients')
    op.create_index(op.f('ix_clients_company_id'), 'clients', ['company_id'], unique=False)
    op.create_foreign_key(None, 'clients', 'companies', ['company_id'], ['id'], ondelete='CASCADE')
    # 5) Drop old columns
    op.drop_column('clients', 'business_name')
    op.drop_column('clients', 'address')
    op.drop_column('clients', 'nit')
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.add_column('clients', sa.Column('nit', sa.VARCHAR(length=9), autoincrement=False, nullable=False))
    op.add_column('clients', sa.Column('address', sa.VARCHAR(length=100), autoincrement=False, nullable=True))
    op.add_column('clients', sa.Column('business_name', sa.VARCHAR(length=255), autoincrement=False, nullable=False))
    op.drop_constraint(None, 'clients', type_='foreignkey')
    op.drop_index(op.f('ix_clients_company_id'), table_name='clients')
    op.create_index('ix_clients_nit', 'clients', ['nit'], unique=False)
    op.drop_column('clients', 'company_id')
    op.drop_index(op.f('ix_companies_nit'), table_name='companies')
    op.drop_table('companies')
    # ### end Alembic commands ###
